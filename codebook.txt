Codebook


R version 3.2.1 (2015-06-18)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 8 x64 (build 9200)

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252    LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C                           LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] devtools_1.8.0 car_2.0-25     tidyr_0.2.0    dplyr_0.4.2    plyr_1.8.3    

loaded via a namespace (and not attached):
 [1] Rcpp_0.11.6      rstudioapi_0.3.1 xml2_0.1.1       magrittr_1.5     splines_3.2.1    MASS_7.3-40      lattice_0.20-31 
 [8] R6_2.1.0         minqa_1.2.4      tools_3.2.1      nnet_7.3-9       parallel_3.2.1   pbkrtest_0.4-2   grid_3.2.1      
[15] nlme_3.1-120     mgcv_1.8-6       quantreg_5.11    DBI_0.3.1        git2r_0.10.1     rversions_1.0.2  digest_0.6.8    
[22] lme4_1.1-8       lazyeval_0.1.10  assertthat_0.1   Matrix_1.2-1     nloptr_1.0.4     curl_0.9.1       memoise_0.2.1   
[29] SparseM_1.6     

Session info -----------------------------------------------------------------------------------------------------------------------------
 setting  value                       
 version  R version 3.2.1 (2015-06-18)
 system   x86_64, mingw32             
 ui       RStudio (0.99.465)          
 language (EN)                        
 collate  English_United States.1252  
 tz       America/New_York            

Packages ---------------------------------------------------------------------------------------------------------------------------------
 package    * version date       source        
 assertthat   0.1     2013-12-06 CRAN (R 3.2.1)
 car        * 2.0-25  2015-03-03 CRAN (R 3.2.1)
 curl         0.9.1   2015-07-04 CRAN (R 3.2.1)
 DBI          0.3.1   2014-09-24 CRAN (R 3.2.1)
 devtools   * 1.8.0   2015-05-09 CRAN (R 3.2.1)
 digest       0.6.8   2014-12-31 CRAN (R 3.2.0)
 dplyr      * 0.4.2   2015-06-16 CRAN (R 3.2.1)
 git2r        0.10.1  2015-05-07 CRAN (R 3.2.1)
 lattice      0.20-31 2015-03-30 CRAN (R 3.2.1)
 lazyeval     0.1.10  2015-01-02 CRAN (R 3.2.1)
 lme4         1.1-8   2015-06-22 CRAN (R 3.2.1)
 magrittr     1.5     2014-11-22 CRAN (R 3.2.0)
 MASS         7.3-40  2015-03-21 CRAN (R 3.2.1)
 Matrix       1.2-1   2015-06-01 CRAN (R 3.2.1)
 memoise      0.2.1   2014-04-22 CRAN (R 3.2.1)
 mgcv         1.8-6   2015-03-31 CRAN (R 3.2.1)
 minqa        1.2.4   2014-10-09 CRAN (R 3.2.1)
 nlme         3.1-120 2015-02-20 CRAN (R 3.2.1)
 nloptr       1.0.4   2014-08-04 CRAN (R 3.2.1)
 nnet         7.3-9   2015-02-11 CRAN (R 3.2.1)
 pbkrtest     0.4-2   2014-11-13 CRAN (R 3.2.1)
 plyr       * 1.8.3   2015-06-12 CRAN (R 3.2.1)
 quantreg     5.11    2015-01-11 CRAN (R 3.2.1)
 R6           2.1.0   2015-07-04 CRAN (R 3.2.1)
 Rcpp         0.11.6  2015-05-01 CRAN (R 3.2.1)
 rstudioapi   0.3.1   2015-04-07 CRAN (R 3.2.1)
 rversions    1.0.2   2015-07-13 CRAN (R 3.2.1)
 SparseM      1.6     2015-01-05 CRAN (R 3.2.1)
 tidyr      * 0.2.0   2014-12-05 CRAN (R 3.2.1)
 xml2         0.1.1   2015-06-02 CRAN (R 3.2.1)
 
 GCD Script
 
 #-------------------------Read Files-----------------------------------
# Use 'read.table()' to read files by full filenames.  A loop may be
# written to read each file in the directory and assign a predetermined
# name as defined in a names vector.

features <- read.table("UCI HAR Dataset/features.txt")
activity_labels <- read.table("UCI HAR Dataset/activity_labels.txt")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")

#-------------------------Build Dataframe------------------------------
# Features is a dataframe of column names for the 'x_' dataframes.
# Extract the column information for feature names and store it into
# a variable as a vector -- for this case 'feature.names.vector'.
# Use 'colnames()' on 'x_'.
# As follows

feature.names.vector <- features$V2
colnames(x_test) <- feature.names.vector
colnames(x_train) <- feature.names.vector
#-------------------------Build Dataframe-----------------------------
# Two more vectors must be created and named for subjects and activity
# and added to the 'x_' dataframe.  Use 'cbind()' complete the dataframe
# and save it to a new variable -- 'complete.activity'.
# As follows

activity <- y_test$V1
subject <- subject_test$V1
complete.activity <- cbind(subject, activity, x_test)

# Here view the first 5 rows and first 3 columns:
# > complete.activity[1:5, 1:3]
#   subject activity tBodyAcc-mean()-X
# 1       2        5         0.2571778
# 2       2        5         0.2860267
# 3       2        5         0.2754848
# 4       2        5         0.2702982
# 5       2        5         0.2748330
#-------------------------Build Dataframe-------------------------------

# Once a working dataframe is constructed, the test and train datasets
# may be combined using 'cbind()' first as described above followed by 
# 'rbind()' to add additional rows.


activity <- y_train$V1
subject <- subject_train$V1
complete.activity.train <- cbind(subject, activity, x_train)

all.activity <- rbind(complete.activity, complete.activity.train)

# > all.activity[1:10, 1:6]
#    subject activity tBodyAcc-mean()-X tBodyAcc-mean()-Y tBodyAcc-mean()-Z tBodyAcc-std()-X
# 1        2        5         0.2571778       -0.02328523       -0.01465376       -0.9384040
# 2        2        5         0.2860267       -0.01316336       -0.11908252       -0.9754147
# 3        2        5         0.2754848       -0.02605042       -0.11815167       -0.9938190
# 4        2        5         0.2702982       -0.03261387       -0.11752018       -0.9947428
# 5        2        5         0.2748330       -0.02784779       -0.12952716       -0.9938525
# 6        2        5         0.2792199       -0.01862040       -0.11390197       -0.9944552
# 7        2        5         0.2797459       -0.01827103       -0.10399988       -0.9958192
# 8        2        5         0.2746005       -0.02503513       -0.11683085       -0.9955944
# 9        2        5         0.2725287       -0.02095401       -0.11447249       -0.9967841
# 10       2        5         0.2757457       -0.01037199       -0.09977589       -0.9983731
#
# Take note of the dimensions and class of the completed dataframe.
# > dim(all.activity)
# [1] 10299   563
# > class(all.activity)
# [1] "data.frame"
#-------------------------Tidy the Dataframe--------------------------------------------------
# The initial dataframe is composed using the base package.  To simplify cleaning the data load
# 'tidyr' and 'dplyr'.  First the dataframe is loaded using 'tbl_df'.
require(plyr)
require(dplyr)
require(tidyr)

all.activity.3 <- all.activity[ !duplicated(names(all.activity))]
all.activity.3 <- tbl_df(all.activity.3)
select(all.activity.3, subject, activity, contains("mean()"), contains("std()"))

# > select(all.activity.3, subject, activity, contains("mean()"), contains("std()"))
# Source: local data frame [10,299 x 68]

#    subject activity tBodyAcc-mean()-X tBodyAcc-mean()-Y tBodyAcc-mean()-Z tGravityAcc-mean()-X tGravityAcc-mean()-Y
# 1        2        5         0.2571778       -0.02328523       -0.01465376            0.9364893           -0.2827192
# 2        2        5         0.2860267       -0.01316336       -0.11908252            0.9274036           -0.2892151
# 3        2        5         0.2754848       -0.02605042       -0.11815167            0.9299150           -0.2875128
# 4        2        5         0.2702982       -0.03261387       -0.11752018            0.9288814           -0.2933958
# 5        2        5         0.2748330       -0.02784779       -0.12952716            0.9265997           -0.3029609
# 6        2        5         0.2792199       -0.01862040       -0.11390197            0.9256632           -0.3089397
# 7        2        5         0.2797459       -0.01827103       -0.10399988            0.9261366           -0.3095639
# 8        2        5         0.2746005       -0.02503513       -0.11683085            0.9265862           -0.3107735
# 9        2        5         0.2725287       -0.02095401       -0.11447249            0.9255553           -0.3157374
# 10       2        5         0.2757457       -0.01037199       -0.09977589            0.9241734           -0.3175966
# ..     ...      ...               ...               ...               ...                  ...                  ...

# Careful examination of the remaining variables not printed shows that only colnames containing "mean()" or "std()" are
# selected.

chosen.variables <- select(all.activity.3, subject, activity, contains("mean()"), contains("std()"))

require(car)

# Use the 'recode()' function in the package 'car' to assign the activity descriptors to the numbers in the 'activity' column
# Create a vector assigning 'activity' in 'chosen.variables' to 'activity.number'.
# http://www.inside-r.org/packages/cran/car/docs/recode
activity.number <- chosen.variables$activity

# > activity.number[1:100]
# [1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 6 6 6 6 6 6 6 6 6 6
# [66] 6 6 6 6 6 6 6 6 6 6 6 6 6 6 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

activity.recoded <- Recode(activity.number, "1 = 'walking'; 
                                             2 = 'walking upstairs'; 
                                             3 = 'walking downstairs'; 
                                             4 = 'sitting'; 
                                             5 = 'standing'; 
                                             6 = 'laying'")

# > activity.recoded[1:100]
# [1] "standing" "standing" "standing" "standing" "standing" "standing" "standing" "standing" "standing" "standing" "standing"
# [12] "standing" "standing" "standing" "standing" "standing" "standing" "standing" "standing" "standing" "standing" "standing"
# [23] "standing" "standing" "standing" "standing" "standing" "standing" "standing" "standing" "standing" "sitting"  "sitting" 
# [34] "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting" 
# [45] "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting"  "sitting" 
# [56] "laying"   "laying"   "laying"   "laying"   "laying"   "laying"   "laying"   "laying"   "laying"   "laying"   "laying"  
# [67] "laying"   "laying"   "laying"   "laying"   "laying"   "laying"   "laying"   "laying"   "laying"   "laying"   "laying"  
# [78] "laying"   "laying"   "walking"  "walking"  "walking"  "walking"  "walking"  "walking"  "walking"  "walking"  "walking" 
# [89] "walking"  "walking"  "walking"  "walking"  "walking"  "walking"  "walking"  "walking"  "walking"  "walking"  "walking" 
# [100] "walking" 


# Save the new recoded variables to the 'activity' column in 'chosen.variables'.
chosen.variables$activity <- activity.recoded

# > chosen.variables
# Source: local data frame [10,299 x 68]

#    subject activity tBodyAcc-mean()-X tBodyAcc-mean()-Y tBodyAcc-mean()-Z tGravityAcc-mean()-X tGravityAcc-mean()-Y
# 1        2 standing         0.2571778       -0.02328523       -0.01465376            0.9364893           -0.2827192
# 2        2 standing         0.2860267       -0.01316336       -0.11908252            0.9274036           -0.2892151
# 3        2 standing         0.2754848       -0.02605042       -0.11815167            0.9299150           -0.2875128
# 4        2 standing         0.2702982       -0.03261387       -0.11752018            0.9288814           -0.2933958
# 5        2 standing         0.2748330       -0.02784779       -0.12952716            0.9265997           -0.3029609
# 6        2 standing         0.2792199       -0.01862040       -0.11390197            0.9256632           -0.3089397
# 7        2 standing         0.2797459       -0.01827103       -0.10399988            0.9261366           -0.3095639
# 8        2 standing         0.2746005       -0.02503513       -0.11683085            0.9265862           -0.3107735
# 9        2 standing         0.2725287       -0.02095401       -0.11447249            0.9255553           -0.3157374
# 10       2 standing         0.2757457       -0.01037199       -0.09977589            0.9241734           -0.3175966
# ..     ...      ...               ...               ...               ...                  ...                  ...

#-------------------------------Write Tidy dataframe to a Table----------------------------
# Create a '.txt' file using 'write.table()'
write.table(chosen.variables, file = "activity_data.txt")

# The following code outputs a dataframe that shows the mean for each feature grouped by subject and activity,
# then arranged by subject and activity.

grouped <- group_by(chosen.variables, subject, activity)
arranged <- arrange(grouped, subject, activity)
summarise_each(arranged, funs(mean))

# Source: local data frame [180 x 68]
# Groups: subject

#    subject           activity tBodyAcc-mean()-X tBodyAcc-mean()-Y tBodyAcc-mean()-Z tGravityAcc-mean()-X
# 1        1             laying         0.2215982      -0.040513953        -0.1132036           -0.2488818
# 2        1            sitting         0.2612376      -0.001308288        -0.1045442            0.8315099
# 3        1           standing         0.2789176      -0.016137590        -0.1106018            0.9429520
# 4        1            walking         0.2773308      -0.017383819        -0.1111481            0.9352232
# 5        1 walking downstairs         0.2891883      -0.009918505        -0.1075662            0.9318744
# 6        1   walking upstairs         0.2554617      -0.023953149        -0.0973020            0.8933511
# 7        2             laying         0.2813734      -0.018158740        -0.1072456           -0.5097542
# 8        2            sitting         0.2770874      -0.015687994        -0.1092183            0.9404773
# 9        2           standing         0.2779115      -0.018420827        -0.1059085            0.8969286
# 10       2            walking         0.2764266      -0.018594920        -0.1055004            0.9130173
# ..     ...                ...               ...               ...               ...                  ...

# The next code outputs a dataframe that shows the mean for each feature grouped by activity and subject,
# then arranged by activity and subject.

grouped2 <- group_by(chosen.variables, activity, subject)
arranged2 <- arrange(grouped2, activity, subject)
summarise_each(arranged2, funs(mean))

# Source: local data frame [180 x 68]
# Groups: activity

#    activity subject tBodyAcc-mean()-X tBodyAcc-mean()-Y tBodyAcc-mean()-Z tGravityAcc-mean()-X tGravityAcc-mean()-Y
# 1    laying       1         0.2215982       -0.04051395        -0.1132036           -0.2488818            0.7055498
# 2    laying       2         0.2813734       -0.01815874        -0.1072456           -0.5097542            0.7525366
# 3    laying       3         0.2755169       -0.01895568        -0.1013005           -0.2417585            0.8370321
# 4    laying       4         0.2635592       -0.01500318        -0.1106882           -0.4206647            0.9151651
# 5    laying       5         0.2783343       -0.01830421        -0.1079376           -0.4834706            0.9548903
# 6    laying       6         0.2486565       -0.01025292        -0.1331196           -0.4767099            0.9565938
# 7    laying       7         0.2501767       -0.02044115        -0.1013610           -0.5028143            0.3934443
# 8    laying       8         0.2612543       -0.02122817        -0.1022454           -0.4059300            0.5899224
# 9    laying       9         0.2591955       -0.02052682        -0.1075497           -0.5802528           -0.1191542
# 10   laying      10         0.2802306       -0.02429448        -0.1171686           -0.4530697           -0.1392977
# ..      ...     ...               ...               ...               ...                  ...                  ...

# The next code outputs a dataframe that shows the means of each feature grouped by activity,
# then arranged by subject.  Notice that the subject numbers are also averaged, but can be removed as shown
# in the next set of code.  Also note that averages are calculated across each activity.


grouped3 <- group_by(chosen.variables, activity)
arranged3 <- arrange(grouped3, subject)
summarise_each(arranged3, funs(mean))

# Source: local data frame [6 x 68]
# 
#             activity  subject tBodyAcc-mean()-X tBodyAcc-mean()-Y tBodyAcc-mean()-Z tGravityAcc-mean()-X
# 1             laying 16.64352         0.2686486       -0.01831773        -0.1074356           -0.3750213
# 2            sitting 16.68036         0.2730596       -0.01268957        -0.1055170            0.8797312
# 3           standing 16.51312         0.2791535       -0.01615189        -0.1065869            0.9414796
# 4            walking 15.27294         0.2763369       -0.01790683        -0.1088817            0.9349916
# 5 walking downstairs 15.82859         0.2881372       -0.01631193        -0.1057616            0.9264574
# 6   walking upstairs 15.71697         0.2622946       -0.02592329        -0.1205379            0.8750034

summarise_each(grouped3, funs(mean), -subject)

# Source: local data frame [6 x 67]
# 
# activity tBodyAcc-mean()-X tBodyAcc-mean()-Y tBodyAcc-mean()-Z tGravityAcc-mean()-X tGravityAcc-mean()-Y
# 1             laying         0.2686486       -0.01831773        -0.1074356           -0.3750213            0.6222704
# 2            sitting         0.2730596       -0.01268957        -0.1055170            0.8797312            0.1087135
# 3           standing         0.2791535       -0.01615189        -0.1065869            0.9414796           -0.1842465
# 4            walking         0.2763369       -0.01790683        -0.1088817            0.9349916           -0.1967135
# 5 walking downstairs         0.2881372       -0.01631193        -0.1057616            0.9264574           -0.1685072
# 6   walking upstairs         0.2622946       -0.02592329        -0.1205379            0.8750034           -0.2813772


# Grouping by subject only introduces 'NA' into the activity column upon calculating the means.
# The following dataframe shows the mean for each feature grouped by subject with activity removed.
# A mean for each feature is assigned to each of the 30 subjects.

grouped5 <- group_by(chosen.variables, subject)
summarise_each(grouped5, funs(mean), -activity)

# Source: local data frame [30 x 67]
# 
# subject tBodyAcc-mean()-X tBodyAcc-mean()-Y tBodyAcc-mean()-Z tGravityAcc-mean()-X tGravityAcc-mean()-Y
# 1        1         0.2656969       -0.01829817        -0.1078457            0.7448674          -0.08255626
# 2        2         0.2731131       -0.01913232        -0.1156500            0.6607829          -0.14721989
# 3        3         0.2734287       -0.01785607        -0.1064926            0.7078144          -0.02605905
# 4        4         0.2741831       -0.01480815        -0.1075214            0.7065930           0.11259120
# 5        5         0.2791780       -0.01548335        -0.1056617            0.6981537           0.11231311
# 6        6         0.2723766       -0.01756970        -0.1159945            0.6887021           0.01620555
# 7        7         0.2702117       -0.01879049        -0.1124924            0.6812891          -0.04202215
# 8        8         0.2707591       -0.01818950        -0.1068096            0.6474982           0.03032111
# 9        9         0.2703138       -0.02094666        -0.1012338            0.6708455          -0.04674470
# 10      10         0.2768485       -0.01783579        -0.1113015            0.6429057          -0.07402485
# ..     ...               ...               ...               ...                  ...                  ...

Duplicated Column Names Illustration and Resolution

An initial attempt to select() specific columns from the tbl_df results in an 'duplicated column name' error.
Note the first 10 rows of the tbl_df 'all.activity.2' consisting of 10,299 rows and 563 columns.  The 'select()' 
code results in the error.

  > require(dplyr)
  > require(tidyr)
  > all.activity.2 <- tbl_df(all.activity)
  > all.activity.2
  Source: local data frame [10,299 x 563]

     subject activity tBodyAcc-mean()-X tBodyAcc-mean()-Y tBodyAcc-mean()-Z tBodyAcc-std()-X
  1        2        5         0.2571778       -0.02328523       -0.01465376       -0.9384040
  2        2        5         0.2860267       -0.01316336       -0.11908252       -0.9754147
  3        2        5         0.2754848       -0.02605042       -0.11815167       -0.9938190
  4        2        5         0.2702982       -0.03261387       -0.11752018       -0.9947428
  5        2        5         0.2748330       -0.02784779       -0.12952716       -0.9938525
  6        2        5         0.2792199       -0.01862040       -0.11390197       -0.9944552
  7        2        5         0.2797459       -0.01827103       -0.10399988       -0.9958192
  8        2        5         0.2746005       -0.02503513       -0.11683085       -0.9955944
  9        2        5         0.2725287       -0.02095401       -0.11447249       -0.9967841
  10       2        5         0.2757457       -0.01037199       -0.09977589       -0.9983731
  ..     ...      ...               ...               ...               ...              ...

  > select(all.activity.2, subject, activity, contains("mean()"), contains("std()"))
  Error: found duplicated column name

Thanks to a post on stack overflow (SO): http://stackoverflow.com/questions/28549045/dplyr-select-error-found-duplicated-column-name
One post indicates the following code to
    1 -- remove all of the non-duplicated names into a new dataframe
    2 -- pass the new dataframe into tbl_df
    3 -- select the necessary columns
  
Note that the new dataframe has 68 columns which disagrees with the code posted to SO.  The difference is due
to the matching term used to find column names, i.e. "mean()" and "std()" vs. "mean" and "std".

  > all.activity.3 <- all.activity[ !duplicated(names(all.activity))]
  > all.activity.3 <- tbl_df(all.activity.3)
  > View(all.activity.3)
  > select(all.activity.3, subject, activity, contains("mean()"), contains("std()"))
  Source: local data frame [10,299 x 68]
  
     subject activity tBodyAcc-mean()-X tBodyAcc-mean()-Y tBodyAcc-mean()-Z tGravityAcc-mean()-X tGravityAcc-mean()-Y
  1        2        5         0.2571778       -0.02328523       -0.01465376            0.9364893           -0.2827192
  2        2        5         0.2860267       -0.01316336       -0.11908252            0.9274036           -0.2892151
  3        2        5         0.2754848       -0.02605042       -0.11815167            0.9299150           -0.2875128
  4        2        5         0.2702982       -0.03261387       -0.11752018            0.9288814           -0.2933958
  5        2        5         0.2748330       -0.02784779       -0.12952716            0.9265997           -0.3029609
  6        2        5         0.2792199       -0.01862040       -0.11390197            0.9256632           -0.3089397
  7        2        5         0.2797459       -0.01827103       -0.10399988            0.9261366           -0.3095639
  8        2        5         0.2746005       -0.02503513       -0.11683085            0.9265862           -0.3107735
  9        2        5         0.2725287       -0.02095401       -0.11447249            0.9255553           -0.3157374
  10       2        5         0.2757457       -0.01037199       -0.09977589            0.9241734           -0.3175966
  ..     ...      ...               ...               ...               ...                  ...                  ...
  
  > select(all.activity.3, subject, activity, contains("mean"), contains("std"))
  Source: local data frame [10,299 x 88]
  
     subject activity tBodyAcc-mean()-X tBodyAcc-mean()-Y tBodyAcc-mean()-Z tGravityAcc-mean()-X tGravityAcc-mean()-Y
  1        2        5         0.2571778       -0.02328523       -0.01465376            0.9364893           -0.2827192
  2        2        5         0.2860267       -0.01316336       -0.11908252            0.9274036           -0.2892151
  3        2        5         0.2754848       -0.02605042       -0.11815167            0.9299150           -0.2875128
  4        2        5         0.2702982       -0.03261387       -0.11752018            0.9288814           -0.2933958
  5        2        5         0.2748330       -0.02784779       -0.12952716            0.9265997           -0.3029609
  6        2        5         0.2792199       -0.01862040       -0.11390197            0.9256632           -0.3089397
  7        2        5         0.2797459       -0.01827103       -0.10399988            0.9261366           -0.3095639
  8        2        5         0.2746005       -0.02503513       -0.11683085            0.9265862           -0.3107735
  9        2        5         0.2725287       -0.02095401       -0.11447249            0.9255553           -0.3157374
  10       2        5         0.2757457       -0.01037199       -0.09977589            0.9241734           -0.3175966
  ..     ...      ...               ...               ...               ...                  ...                  ...
  
Further investigation reveals that there are 84 duplicated coloumn names in features.txt.  There are also other column names that contain "mean" or "std" which are not technically the mean of a particular feature.  For example, the angle() variable lists several mean values as other columns named such as meanFreq.  For the sake of simplicity in completing the assingment only columns fitting the following pattern were isolated: 'feature-fun()-axis' where feature is the name of the feature as described in features_info.txt, fun() is either mean() or std(), and axis is X, Y, or Z.

The following is the code used to investigate column names.
  
  > meanStdColumns <- grep("mean|std", features$V2, value = FALSE)
  > meanStdColumnsNames <- grep("mean|std", features$V2, value = TRUE)
  > duplicated(meanStdColumnsNames)
  > duplicated(c(features$V2))
  > sum(duplicated(c(features$V2)))
  > length(meanStdColumnsNames)
  > length(meanStdColumns)
  
  Dataframe Structures

Tidy Data 1
> str(tdata1)
'data.frame':	180 obs. of  68 variables:
 $ subject                    : int  1 1 1 1 1 1 2 2 2 2 ...
 $ activity                   : Factor w/ 6 levels "laying","sitting",..: 1 2 3 4 5 6 1 2 3 4 ...
 $ tBodyAcc.mean...X          : num  0.222 0.261 0.279 0.277 0.289 ...
 $ tBodyAcc.mean...Y          : num  -0.04051 -0.00131 -0.01614 -0.01738 -0.00992 ...
 $ tBodyAcc.mean...Z          : num  -0.113 -0.105 -0.111 -0.111 -0.108 ...
 $ tGravityAcc.mean...X       : num  -0.249 0.832 0.943 0.935 0.932 ...
 $ tGravityAcc.mean...Y       : num  0.706 0.204 -0.273 -0.282 -0.267 ...
 $ tGravityAcc.mean...Z       : num  0.4458 0.332 0.0135 -0.0681 -0.0621 ...
 $ tBodyAccJerk.mean...X      : num  0.0811 0.0775 0.0754 0.074 0.0542 ...
 $ tBodyAccJerk.mean...Y      : num  0.003838 -0.000619 0.007976 0.028272 0.02965 ...
 $ tBodyAccJerk.mean...Z      : num  0.01083 -0.00337 -0.00369 -0.00417 -0.01097 ...
 $ tBodyGyro.mean...X         : num  -0.0166 -0.0454 -0.024 -0.0418 -0.0351 ...
 $ tBodyGyro.mean...Y         : num  -0.0645 -0.0919 -0.0594 -0.0695 -0.0909 ...
 $ tBodyGyro.mean...Z         : num  0.1487 0.0629 0.0748 0.0849 0.0901 ...
 $ tBodyGyroJerk.mean...X     : num  -0.1073 -0.0937 -0.0996 -0.09 -0.074 ...
 $ tBodyGyroJerk.mean...Y     : num  -0.0415 -0.0402 -0.0441 -0.0398 -0.044 ...
 $ tBodyGyroJerk.mean...Z     : num  -0.0741 -0.0467 -0.049 -0.0461 -0.027 ...
 $ tBodyAccMag.mean..         : num  -0.8419 -0.9485 -0.9843 -0.137 0.0272 ...
 $ tGravityAccMag.mean..      : num  -0.8419 -0.9485 -0.9843 -0.137 0.0272 ...
 $ tBodyAccJerkMag.mean..     : num  -0.9544 -0.9874 -0.9924 -0.1414 -0.0894 ...
 $ tBodyGyroMag.mean..        : num  -0.8748 -0.9309 -0.9765 -0.161 -0.0757 ...
 $ tBodyGyroJerkMag.mean..    : num  -0.963 -0.992 -0.995 -0.299 -0.295 ...
 $ fBodyAcc.mean...X          : num  -0.9391 -0.9796 -0.9952 -0.2028 0.0382 ...
 $ fBodyAcc.mean...Y          : num  -0.86707 -0.94408 -0.97707 0.08971 0.00155 ...
 $ fBodyAcc.mean...Z          : num  -0.883 -0.959 -0.985 -0.332 -0.226 ...
 $ fBodyAccJerk.mean...X      : num  -0.9571 -0.9866 -0.9946 -0.1705 -0.0277 ...
 $ fBodyAccJerk.mean...Y      : num  -0.9225 -0.9816 -0.9854 -0.0352 -0.1287 ...
 $ fBodyAccJerk.mean...Z      : num  -0.948 -0.986 -0.991 -0.469 -0.288 ...
 $ fBodyGyro.mean...X         : num  -0.85 -0.976 -0.986 -0.339 -0.352 ...
 $ fBodyGyro.mean...Y         : num  -0.9522 -0.9758 -0.989 -0.1031 -0.0557 ...
 $ fBodyGyro.mean...Z         : num  -0.9093 -0.9513 -0.9808 -0.2559 -0.0319 ...
 $ fBodyAccMag.mean..         : num  -0.8618 -0.9478 -0.9854 -0.1286 0.0966 ...
 $ fBodyBodyAccJerkMag.mean.. : num  -0.9333 -0.9853 -0.9925 -0.0571 0.0262 ...
 $ fBodyBodyGyroMag.mean..    : num  -0.862 -0.958 -0.985 -0.199 -0.186 ...
 $ fBodyBodyGyroJerkMag.mean..: num  -0.942 -0.99 -0.995 -0.319 -0.282 ...
 $ tBodyAcc.std...X           : num  -0.928 -0.977 -0.996 -0.284 0.03 ...
 $ tBodyAcc.std...Y           : num  -0.8368 -0.9226 -0.9732 0.1145 -0.0319 ...
 $ tBodyAcc.std...Z           : num  -0.826 -0.94 -0.98 -0.26 -0.23 ...
 $ tGravityAcc.std...X        : num  -0.897 -0.968 -0.994 -0.977 -0.951 ...
 $ tGravityAcc.std...Y        : num  -0.908 -0.936 -0.981 -0.971 -0.937 ...
 $ tGravityAcc.std...Z        : num  -0.852 -0.949 -0.976 -0.948 -0.896 ...
 $ tBodyAccJerk.std...X       : num  -0.9585 -0.9864 -0.9946 -0.1136 -0.0123 ...
 $ tBodyAccJerk.std...Y       : num  -0.924 -0.981 -0.986 0.067 -0.102 ...
 $ tBodyAccJerk.std...Z       : num  -0.955 -0.988 -0.992 -0.503 -0.346 ...
 $ tBodyGyro.std...X          : num  -0.874 -0.977 -0.987 -0.474 -0.458 ...
 $ tBodyGyro.std...Y          : num  -0.9511 -0.9665 -0.9877 -0.0546 -0.1263 ...
 $ tBodyGyro.std...Z          : num  -0.908 -0.941 -0.981 -0.344 -0.125 ...
 $ tBodyGyroJerk.std...X      : num  -0.919 -0.992 -0.993 -0.207 -0.487 ...
 $ tBodyGyroJerk.std...Y      : num  -0.968 -0.99 -0.995 -0.304 -0.239 ...
 $ tBodyGyroJerk.std...Z      : num  -0.958 -0.988 -0.992 -0.404 -0.269 ...
 $ tBodyAccMag.std..          : num  -0.7951 -0.9271 -0.9819 -0.2197 0.0199 ...
 $ tGravityAccMag.std..       : num  -0.7951 -0.9271 -0.9819 -0.2197 0.0199 ...
 $ tBodyAccJerkMag.std..      : num  -0.9282 -0.9841 -0.9931 -0.0745 -0.0258 ...
 $ tBodyGyroMag.std..         : num  -0.819 -0.935 -0.979 -0.187 -0.226 ...
 $ tBodyGyroJerkMag.std..     : num  -0.936 -0.988 -0.995 -0.325 -0.307 ...
 $ fBodyAcc.std...X           : num  -0.9244 -0.9764 -0.996 -0.3191 0.0243 ...
 $ fBodyAcc.std...Y           : num  -0.834 -0.917 -0.972 0.056 -0.113 ...
 $ fBodyAcc.std...Z           : num  -0.813 -0.934 -0.978 -0.28 -0.298 ...
 $ fBodyAccJerk.std...X       : num  -0.9642 -0.9875 -0.9951 -0.1336 -0.0863 ...
 $ fBodyAccJerk.std...Y       : num  -0.932 -0.983 -0.987 0.107 -0.135 ...
 $ fBodyAccJerk.std...Z       : num  -0.961 -0.988 -0.992 -0.535 -0.402 ...
 $ fBodyGyro.std...X          : num  -0.882 -0.978 -0.987 -0.517 -0.495 ...
 $ fBodyGyro.std...Y          : num  -0.9512 -0.9623 -0.9871 -0.0335 -0.1814 ...
 $ fBodyGyro.std...Z          : num  -0.917 -0.944 -0.982 -0.437 -0.238 ...
 $ fBodyAccMag.std..          : num  -0.798 -0.928 -0.982 -0.398 -0.187 ...
 $ fBodyBodyAccJerkMag.std..  : num  -0.922 -0.982 -0.993 -0.103 -0.104 ...
 $ fBodyBodyGyroMag.std..     : num  -0.824 -0.932 -0.978 -0.321 -0.398 ...
 $ fBodyBodyGyroJerkMag.std.. : num  -0.933 -0.987 -0.995 -0.382 -0.392 ...

Tidy Data 2
> str(tdata2)
'data.frame':	6 obs. of  67 variables:
 $ activity                   : Factor w/ 6 levels "laying","sitting",..: 1 2 3 4 5 6
 $ tBodyAcc.mean...X          : num  0.269 0.273 0.279 0.276 0.288 ...
 $ tBodyAcc.mean...Y          : num  -0.0183 -0.0127 -0.0162 -0.0179 -0.0163 ...
 $ tBodyAcc.mean...Z          : num  -0.107 -0.106 -0.107 -0.109 -0.106 ...
 $ tGravityAcc.mean...X       : num  -0.375 0.88 0.941 0.935 0.926 ...
 $ tGravityAcc.mean...Y       : num  0.622 0.109 -0.184 -0.197 -0.169 ...
 $ tGravityAcc.mean...Z       : num  0.5556 0.1538 -0.0141 -0.0538 -0.048 ...
 $ tBodyAccJerk.mean...X      : num  0.0818 0.0759 0.075 0.0767 0.0892 ...
 $ tBodyAccJerk.mean...Y      : num  0.011172 0.005047 0.008805 0.011506 0.000747 ...
 $ tBodyAccJerk.mean...Z      : num  -0.00486 -0.00249 -0.00458 -0.00232 -0.00873 ...
 $ tBodyGyro.mean...X         : num  -0.0167 -0.0384 -0.0267 -0.0347 -0.084 ...
 $ tBodyGyro.mean...Y         : num  -0.0934 -0.0721 -0.0677 -0.0694 -0.053 ...
 $ tBodyGyro.mean...Z         : num  0.1259 0.0778 0.0801 0.0864 0.0947 ...
 $ tBodyGyroJerk.mean...X     : num  -0.1019 -0.0957 -0.0997 -0.0943 -0.0729 ...
 $ tBodyGyroJerk.mean...Y     : num  -0.0382 -0.0408 -0.0423 -0.0446 -0.0513 ...
 $ tBodyGyroJerk.mean...Z     : num  -0.0638 -0.0508 -0.0521 -0.054 -0.0547 ...
 $ tBodyAccMag.mean..         : num  -0.941 -0.955 -0.954 -0.168 0.101 ...
 $ tGravityAccMag.mean..      : num  -0.941 -0.955 -0.954 -0.168 0.101 ...
 $ tBodyAccJerkMag.mean..     : num  -0.979 -0.982 -0.977 -0.241 -0.112 ...
 $ tBodyGyroMag.mean..        : num  -0.938 -0.947 -0.942 -0.275 -0.13 ...
 $ tBodyGyroJerkMag.mean..    : num  -0.983 -0.988 -0.979 -0.461 -0.417 ...
 $ fBodyAcc.mean...X          : num  -0.9668 -0.9831 -0.9816 -0.2979 0.0353 ...
 $ fBodyAcc.mean...Y          : num  -0.9527 -0.9479 -0.9431 -0.0423 0.0567 ...
 $ fBodyAcc.mean...Z          : num  -0.96 -0.957 -0.957 -0.342 -0.214 ...
 $ fBodyAccJerk.mean...X      : num  -0.9802 -0.9852 -0.98 -0.3111 -0.0723 ...
 $ fBodyAccJerk.mean...Y      : num  -0.971 -0.974 -0.965 -0.17 -0.116 ...
 $ fBodyAccJerk.mean...Z      : num  -0.977 -0.98 -0.976 -0.451 -0.333 ...
 $ fBodyGyro.mean...X         : num  -0.963 -0.977 -0.944 -0.348 -0.218 ...
 $ fBodyGyro.mean...Y         : num  -0.968 -0.972 -0.965 -0.388 -0.318 ...
 $ fBodyGyro.mean...Z         : num  -0.964 -0.961 -0.958 -0.31 -0.166 ...
 $ fBodyAccMag.mean..         : num  -0.948 -0.952 -0.956 -0.276 0.143 ...
 $ fBodyBodyAccJerkMag.mean.. : num  -0.9743 -0.97868 -0.97109 -0.21465 0.00476 ...
 $ fBodyBodyGyroMag.mean..    : num  -0.955 -0.964 -0.948 -0.409 -0.29 ...
 $ fBodyBodyGyroJerkMag.mean..: num  -0.978 -0.985 -0.975 -0.516 -0.438 ...
 $ tBodyAcc.std...X           : num  -0.961 -0.983 -0.984 -0.315 0.101 ...
 $ tBodyAcc.std...Y           : num  -0.9435 -0.9349 -0.9325 -0.0236 0.0595 ...
 $ tBodyAcc.std...Z           : num  -0.948 -0.939 -0.94 -0.274 -0.191 ...
 $ tGravityAcc.std...X        : num  -0.943 -0.98 -0.988 -0.978 -0.95 ...
 $ tGravityAcc.std...Y        : num  -0.963 -0.958 -0.969 -0.967 -0.934 ...
 $ tGravityAcc.std...Z        : num  -0.952 -0.947 -0.953 -0.955 -0.912 ...
 $ tBodyAccJerk.std...X       : num  -0.9804 -0.985 -0.98 -0.2673 -0.0339 ...
 $ tBodyAccJerk.std...Y       : num  -0.9711 -0.9739 -0.9643 -0.1031 -0.0737 ...
 $ tBodyAccJerk.std...Z       : num  -0.979 -0.982 -0.979 -0.479 -0.389 ...
 $ tBodyGyro.std...X          : num  -0.968 -0.981 -0.946 -0.47 -0.334 ...
 $ tBodyGyro.std...Y          : num  -0.963 -0.967 -0.961 -0.348 -0.34 ...
 $ tBodyGyro.std...Z          : num  -0.964 -0.958 -0.957 -0.338 -0.273 ...
 $ tBodyGyroJerk.std...X      : num  -0.976 -0.986 -0.967 -0.376 -0.383 ...
 $ tBodyGyroJerk.std...Y      : num  -0.98 -0.987 -0.98 -0.513 -0.466 ...
 $ tBodyGyroJerk.std...Z      : num  -0.985 -0.984 -0.977 -0.447 -0.326 ...
 $ tBodyAccMag.std..          : num  -0.932 -0.939 -0.947 -0.338 0.116 ...
 $ tGravityAccMag.std..       : num  -0.932 -0.939 -0.947 -0.338 0.116 ...
 $ tBodyAccJerkMag.std..      : num  -0.9742 -0.9789 -0.9715 -0.2146 -0.0112 ...
 $ tBodyGyroMag.std..         : num  -0.941 -0.951 -0.93 -0.383 -0.251 ...
 $ tBodyGyroJerkMag.std..     : num  -0.977 -0.985 -0.974 -0.499 -0.441 ...
 $ fBodyAcc.std...X           : num  -0.959 -0.984 -0.986 -0.323 0.122 ...
 $ fBodyAcc.std...Y           : num  -0.94246 -0.93253 -0.93113 -0.07721 -0.00823 ...
 $ fBodyAcc.std...Z           : num  -0.946 -0.934 -0.935 -0.296 -0.246 ...
 $ fBodyAccJerk.std...X       : num  -0.9825 -0.9862 -0.9818 -0.2879 -0.0822 ...
 $ fBodyAccJerk.std...Y       : num  -0.9731 -0.9758 -0.9668 -0.0909 -0.0914 ...
 $ fBodyAccJerk.std...Z       : num  -0.981 -0.984 -0.982 -0.506 -0.444 ...
 $ fBodyGyro.std...X          : num  -0.97 -0.982 -0.947 -0.51 -0.375 ...
 $ fBodyGyro.std...Y          : num  -0.961 -0.964 -0.959 -0.332 -0.362 ...
 $ fBodyGyro.std...Z          : num  -0.967 -0.961 -0.961 -0.411 -0.38 ...
 $ fBodyAccMag.std..          : num  -0.9349 -0.942 -0.9496 -0.48 -0.0754 ...
 $ fBodyBodyAccJerkMag.std..  : num  -0.9732 -0.9782 -0.9709 -0.2216 -0.0423 ...
 $ fBodyBodyGyroMag.std..     : num  -0.942 -0.952 -0.931 -0.474 -0.361 ...
 $ fBodyBodyGyroJerkMag.std.. : num  -0.977 -0.984 -0.973 -0.514 -0.486 ...

Tidy Data 3
> str(tdata3)
'data.frame':	30 obs. of  67 variables:
 $ subject                    : int  1 2 3 4 5 6 7 8 9 10 ...
 $ tBodyAcc.mean...X          : num  0.266 0.273 0.273 0.274 0.279 ...
 $ tBodyAcc.mean...Y          : num  -0.0183 -0.0191 -0.0179 -0.0148 -0.0155 ...
 $ tBodyAcc.mean...Z          : num  -0.108 -0.116 -0.106 -0.108 -0.106 ...
 $ tGravityAcc.mean...X       : num  0.745 0.661 0.708 0.707 0.698 ...
 $ tGravityAcc.mean...Y       : num  -0.0826 -0.1472 -0.0261 0.1126 0.1123 ...
 $ tGravityAcc.mean...Z       : num  0.0723 0.1349 0.0481 0.1641 0.0922 ...
 $ tBodyAccJerk.mean...X      : num  0.0771 0.0785 0.0702 0.0789 0.0841 ...
 $ tBodyAccJerk.mean...Y      : num  0.01659 0.00709 0.01447 0.00351 0.00177 ...
 $ tBodyAccJerk.mean...Z      : num  -0.009108 0.000756 -0.000527 -0.007374 -0.002954 ...
 $ tBodyGyro.mean...X         : num  -0.0209 -0.0517 -0.0248 -0.0289 -0.0295 ...
 $ tBodyGyro.mean...Y         : num  -0.0881 -0.0568 -0.0744 -0.0787 -0.0774 ...
 $ tBodyGyro.mean...Z         : num  0.0863 0.0873 0.0867 0.0957 0.0866 ...
 $ tBodyGyroJerk.mean...X     : num  -0.0971 -0.0876 -0.0992 -0.1079 -0.1035 ...
 $ tBodyGyroJerk.mean...Y     : num  -0.0417 -0.0434 -0.0402 -0.04 -0.0491 ...
 $ tBodyGyroJerk.mean...Z     : num  -0.0471 -0.0558 -0.0521 -0.0578 -0.0506 ...
 $ tBodyAccMag.mean..         : num  -0.454 -0.535 -0.563 -0.562 -0.461 ...
 $ tGravityAccMag.mean..      : num  -0.454 -0.535 -0.563 -0.562 -0.461 ...
 $ tBodyAccJerkMag.mean..     : num  -0.545 -0.588 -0.65 -0.656 -0.589 ...
 $ tBodyGyroMag.mean..        : num  -0.475 -0.615 -0.643 -0.656 -0.603 ...
 $ tBodyGyroJerkMag.mean..    : num  -0.64 -0.747 -0.784 -0.819 -0.707 ...
 $ fBodyAcc.mean...X          : num  -0.532 -0.574 -0.626 -0.629 -0.551 ...
 $ fBodyAcc.mean...Y          : num  -0.406 -0.433 -0.502 -0.526 -0.44 ...
 $ fBodyAcc.mean...Z          : num  -0.596 -0.63 -0.7 -0.755 -0.696 ...
 $ fBodyAccJerk.mean...X      : num  -0.547 -0.562 -0.646 -0.652 -0.605 ...
 $ fBodyAccJerk.mean...Y      : num  -0.507 -0.509 -0.583 -0.602 -0.551 ...
 $ fBodyAccJerk.mean...Z      : num  -0.695 -0.716 -0.78 -0.825 -0.769 ...
 $ fBodyGyro.mean...X         : num  -0.623 -0.639 -0.642 -0.642 -0.632 ...
 $ fBodyGyro.mean...Y         : num  -0.505 -0.722 -0.775 -0.832 -0.717 ...
 $ fBodyGyro.mean...Z         : num  -0.554 -0.602 -0.671 -0.689 -0.537 ...
 $ fBodyAccMag.mean..         : num  -0.478 -0.515 -0.579 -0.602 -0.529 ...
 $ fBodyBodyAccJerkMag.mean.. : num  -0.499 -0.51 -0.605 -0.635 -0.573 ...
 $ fBodyBodyGyroMag.mean..    : num  -0.535 -0.7 -0.717 -0.746 -0.677 ...
 $ fBodyBodyGyroJerkMag.mean..: num  -0.646 -0.752 -0.81 -0.839 -0.749 ...
 $ tBodyAcc.std...X           : num  -0.546 -0.606 -0.623 -0.605 -0.508 ...
 $ tBodyAcc.std...Y           : num  -0.368 -0.429 -0.48 -0.51 -0.403 ...
 $ tBodyAcc.std...Z           : num  -0.503 -0.589 -0.654 -0.709 -0.646 ...
 $ tGravityAcc.std...X        : num  -0.96 -0.963 -0.966 -0.963 -0.965 ...
 $ tGravityAcc.std...Y        : num  -0.951 -0.96 -0.945 -0.941 -0.94 ...
 $ tGravityAcc.std...Z        : num  -0.926 -0.945 -0.927 -0.941 -0.942 ...
 $ tBodyAccJerk.std...X       : num  -0.525 -0.558 -0.635 -0.632 -0.576 ...
 $ tBodyAccJerk.std...Y       : num  -0.47 -0.492 -0.557 -0.584 -0.507 ...
 $ tBodyAccJerk.std...Z       : num  -0.717 -0.742 -0.796 -0.843 -0.785 ...
 $ tBodyGyro.std...X          : num  -0.687 -0.711 -0.699 -0.701 -0.71 ...
 $ tBodyGyro.std...Y          : num  -0.451 -0.723 -0.763 -0.798 -0.706 ...
 $ tBodyGyro.std...Z          : num  -0.597 -0.635 -0.709 -0.726 -0.607 ...
 $ tBodyGyroJerk.std...X      : num  -0.638 -0.672 -0.689 -0.724 -0.663 ...
 $ tBodyGyroJerk.std...Y      : num  -0.634 -0.784 -0.843 -0.903 -0.774 ...
 $ tBodyGyroJerk.std...Z      : num  -0.665 -0.675 -0.743 -0.748 -0.565 ...
 $ tBodyAccMag.std..          : num  -0.497 -0.553 -0.591 -0.607 -0.522 ...
 $ tGravityAccMag.std..       : num  -0.497 -0.553 -0.591 -0.607 -0.522 ...
 $ tBodyAccJerkMag.std..      : num  -0.516 -0.512 -0.608 -0.647 -0.589 ...
 $ tBodyGyroMag.std..         : num  -0.5 -0.681 -0.674 -0.707 -0.664 ...
 $ tBodyGyroJerkMag.std..     : num  -0.652 -0.74 -0.804 -0.844 -0.734 ...
 $ fBodyAcc.std...X           : num  -0.553 -0.62 -0.624 -0.598 -0.493 ...
 $ fBodyAcc.std...Y           : num  -0.39 -0.465 -0.503 -0.535 -0.422 ...
 $ fBodyAcc.std...Z           : num  -0.499 -0.601 -0.657 -0.709 -0.649 ...
 $ fBodyAccJerk.std...X       : num  -0.544 -0.595 -0.658 -0.645 -0.584 ...
 $ fBodyAccJerk.std...Y       : num  -0.466 -0.509 -0.56 -0.594 -0.492 ...
 $ fBodyAccJerk.std...Z       : num  -0.738 -0.767 -0.811 -0.861 -0.799 ...
 $ fBodyGyro.std...X          : num  -0.708 -0.735 -0.719 -0.722 -0.736 ...
 $ fBodyGyro.std...Y          : num  -0.43 -0.727 -0.759 -0.783 -0.702 ...
 $ fBodyGyro.std...Z          : num  -0.65 -0.683 -0.751 -0.767 -0.669 ...
 $ fBodyAccMag.std..          : num  -0.59 -0.647 -0.663 -0.673 -0.594 ...
 $ fBodyBodyAccJerkMag.std..  : num  -0.542 -0.519 -0.616 -0.667 -0.613 ...
 $ fBodyBodyGyroMag.std..     : num  -0.567 -0.725 -0.704 -0.733 -0.716 ...
 $ fBodyBodyGyroJerkMag.std.. : num  -0.686 -0.744 -0.81 -0.863 -0.736 ...
